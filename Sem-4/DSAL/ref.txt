#include <iostream>
using namespace std;
class Node
{
public:
	int data;
	Node *next;
};
class Stack
{
private:
	Node *top;

public:
	Stack();
	~Stack();
	void push(int x);
	int pop();
	int peek(int index);
	int isEmpty();
	int isFull();
	int stackTop();
};
Stack::Stack()
{
	top = nullptr;
}
Stack::~Stack()
{
	Node *p = top;
	while (top)
	{
		top = top->next;
		delete p;
		p = top;
	}
}
void Stack::push(int x)
{
	Node *t = new Node;
	if (t == nullptr)
	{
		cout << "Stack Overflow!" << endl;
	}
	else
	{
		t->data = x;
		t->next = top;
		top = t;
	}
}
int Stack::pop()
{
	Node *p;
	int x = -1;
	if (top == nullptr)
	{
		cout << "Stack Underflow!" << endl;
	}
	else
	{
		p = top;
		x = p->data;
		top = top->next;
		delete p;
	}
	return x;
}
int Stack::isFull()
{
	Node *t = new Node;
	int r = t ? 1 : 0;
	delete t;
	return r;
}
int Stack::isEmpty()
{
	return top ? 0 : 1;
}
int Stack::stackTop()
{
	if (top)
	{
		return top->data;
	}
	return -1;
}
int Stack::peek(int index)
{
	if (isEmpty())
	{
		return -1;
	}
	else
	{
		Node *p = top;
		for (int i = 0; p != nullptr && i < index - 1; i++)
		{
			p = p->next;
		}
		if (p != nullptr)
		{
			return p->data;
		}
		else
		{
			return -1;
		}
	}
}
int main()
{
	int A[] = {1, 3, 5, 7, 9};
	Stack stk;
	// Populate stack
	for (int i = 0; i < sizeof(A) / sizeof(A[0]); i++)
	{
		stk.push(A[i]);
	}
	cout << "Stack peek at 3rd: " << stk.peek(3) << endl;
	cout << "Stack peek at 10th: " << stk.peek(10) << endl;
	cout << "Stack top: " << stk.stackTop() << endl;
	cout << "Stack full: " << stk.isFull() << endl;
	cout << "Stack empty: " << stk.isEmpty() << endl;
	// Pop out elements from stack
	cout << "Popped: " << flush;
	for (int i = 0; i < sizeof(A) / sizeof(A[0]); i++)
	{
		cout << stk.pop() << ", " << flush;
	}
	cout << endl;
	// Underflow
	cout << stk.pop() << endl;
	return 0;
}

Class Gllnode
{
	Gllnode *next;
	Boolean tag;
	Union
	{
		char data;
		Gllnode *down;
	}
	u;
	Friend class Glist;
	Gllnode(char x)
	{
		data = x;
		next = NULL;
		tag = T;
	}
};
Class Glist
{
	Gllnode *head;
Public:
	Glist() { head = NULL; }
	Void create(str);
};

Input : -(a, b, (d, e), f)

			Gllnode *create(char str[20], i = 0)
{
	Gllnode *q, *s, *start;
	start = NULL;
	While(str[i] !=‘\0’)
	{
If(str[i] ==‘(‘
{
			q = new gllnode() q->tag = T;
			q->next = NULL;
			q->u.down = create(str, ++i)
				If(start == NULL) then start = q;
			Else
			{
				S = start;
				While(s->next !NULL) S = s->next;
				S->next = q;
			}  
}   //case1 if  data is (
If(str[i]!=‘,’ and ‘(‘, and ‘)’)
{
			q = new gllnode();
			q->tag = F,
			q->next = NULL;
			q->u.data = str[i];
			If(start == NULL) start = q;
			Else
			{
				S = start;
				While(s->next != NULL) S = s->next;
				S->next = q;
			}
}  //case2 if data  is character or integer
If str[i] ==‘)’ then return start;     //case3 if data is )
i++;
	} // end while
	return start
}

Display(Gllnode head)
	Gllnode *t;
T = head;
While(T != NULL)
	If(T->tag == 1)
		T = T->down
			Display(T);
Else
	Print(T->u.data)
		T = T->next;
end
